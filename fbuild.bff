#include "config.bff"

ObjectList('shaders')
{
  .Compiler                = 'ShaderCompiler'
  .CompilerOptions         = '-o "%2" "%1" -c'
  .CompilerInputPath       = 'shaders/'
  .CompilerInputPattern    = { '*.vert', '*.frag' }
  .CompilerOutputPath      = .BuildPrefix + 'shaders/'
  .CompilerOutputExtension = '.spv'
}

ObjectList('imgui')
{
  .Compiler           = 'CppCompiler'
  .CompilerOptions    = '-o "%2" "%1" -c -fPIC'
                      + ' -Icontrib/imgui -Icontrib/imgui/backends'
  .CompilerInputPath  = 'contrib/imgui'
  .CompilerOutputPath = .BuildPrefix + 'temp'
}

ObjectList('cudaview')
{
  .Compiler           = 'CppCompiler'
  .CompilerOptions    = ' -o "%2" "%1" -c'
                      + ' -Iinclude -Icontrib/imgui -I$CudaIncludePath$'
                      + ' -std=c++17 -fPIC'
                      + .'Flags$BuildType$'
  .CompilerOutputPath = .BuildPrefix + 'temp'
  .CompilerInputPath  = 'src/'
  .Hidden             = true
}

Library('lib-static')
{
  .Compiler        = 'CppCompiler'
  .CompilerOptions = ' -o "%2" "%1" -c'
                   + ' -Iinclude -Icontrib/imgui -I$CudaIncludePath$'
                   + ' -std=c++17'
                   + .'Flags$BuildType$'
  .LibrarianOutput = .BuildPrefix + 'libcudaview.a'
  .LibrarianAdditionalInputs = { 'cudaview', 'imgui' }
}

DLL('lib-dynamic')
{
  .Libraries     = { 'cudaview', 'imgui' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = .BuildPrefix + 'libcudaview.so'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -shared -lglfw -lvulkan -ldl'
}

CopyDir('copy-headers')
{
  .SourcePaths          = 'include'
  .SourcePathsPattern   = { '*.hpp', '*.h', '*.inl' }
  .Dest                 = .InstallPrefix + 'include/'
  .PreBuildDependencies = 'headers'
}

CopyDir('copy-shaders')
{
  .SourcePaths          = .BuildPrefix + 'shaders/'
  .SourcePathsPattern   = '*.spv'
  .Dest                 = .InstallPrefix + 'lib/shaders/'
  .PreBuildDependencies = 'shaders'
}

CopyDir('copy-lib')
{
  .SourcePaths          = .BuildPrefix
  .SourcePathsPattern   = { '*.a', '*.so' }
  .Dest                 = .InstallPrefix + 'lib/'
  .PreBuildDependencies = { 'lib-static', 'lib-dynamic' }
}

ObjectList('cuda-structured')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17 -g -G'
                        + ' -Isamples/include -Iinclude'
  .CompilerInputPath    = 'samples/structured'
  .CompilerInputPattern = { '*.cu', '*.cpp' }
  .CompilerOutputPath   = .BuildPrefix + 'temp'
}
Executable('run_structured')
{
  .Libraries     = { 'lib-static', 'cuda-structured' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = .BuildPrefix + 'run_structured'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('cuda-unstructured')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17'
                        + ' -Isamples/include -Iinclude'
  .CompilerInputPath    = 'samples/unstructured'
  .CompilerInputPattern = { '*.cu', '*.cpp' }
  .CompilerOutputPath   = .BuildPrefix + 'temp'
}
Executable('run_unstructured')
{
  .Libraries     = { 'lib-static', 'cuda-unstructured' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = .BuildPrefix + 'run_unstructured'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('cuda-image')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17'
                        + ' -Isamples/include -Iinclude'
  .CompilerInputPath    = 'samples/image'
  .CompilerInputPattern = { '*.cu' }
  .CompilerOutputPath   = .BuildPrefix + 'temp'
}
Executable('run_image')
{
  .Libraries     = { 'lib-static', 'cuda-image' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = .BuildPrefix + 'run_image'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('cuda-sync')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17 -Iinclude'
  .CompilerInputPath    = 'samples/GPU-visual-tool-example'
  .CompilerInputPattern = { 'main.cu' }
  .CompilerOutputPath   = .BuildPrefix + 'temp'
}
Executable('run_sync')
{
  .Libraries     = { 'lib-static', 'cuda-sync' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = .BuildPrefix + 'prog'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('cuda-mesh')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17 -Isamples/include -Iinclude'
  .CompilerInputPath    = 'samples/mesh3d'
  .CompilerInputPattern = { '*.cu' }
  .CompilerOutputPath   = .BuildPrefix + 'temp'
}
Executable('run_mesh')
{
  .Libraries     = { 'lib-static', 'cuda-mesh' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = .BuildPrefix + 'mesh3d'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('points3d')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c -G'
                        + ' -std=c++17 -Isamples/include -Iinclude'
  .CompilerInputPath    = 'samples/points3d'
  .CompilerInputPattern = { 'points3d.cu' }
  .CompilerOutputPath   = .BuildPrefix + 'temp'
}
Executable('run_points3d')
{
  .Libraries     = { 'lib-static', 'points3d' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = .BuildPrefix + 'points3d'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

Alias('samples') { .Targets = { 'run_structured', 'run_unstructured',
  'run_image', 'run_sync', 'run_mesh', 'run_points3d' } }

Alias('all') { .Targets = { 'lib-static', 'lib-dynamic' 'shaders', 'samples' } }

Alias('install') { .Targets = { 'copy-headers', 'copy-shaders', 'copy-lib'} }
