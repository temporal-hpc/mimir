#include "config.bff"

ObjectList('shaders')
{
  .Compiler                = 'ShaderCompiler'
  .CompilerOptions         = '-o "%2" "%1" -c'
  .CompilerInputPath       = 'shaders/'
  .CompilerInputPattern    = { '*.vert', '*.frag' }
  .CompilerOutputPath      = '_out/shaders'
  .CompilerOutputExtension = '.spv'
}

ObjectList('imgui')
{
  .Compiler           = '/usr/bin/g++'
  .CompilerOptions    = '-o "%2" "%1" -c'
                      + ' -Icontrib/imgui-1.84.2 -Icontrib/imgui-1.84.2/backends'
  .CompilerInputPath  = 'contrib/imgui-1.84.2'
  .CompilerOutputPath = '_out/'
}

Library('cudaview')
{
  .Compiler           = '/usr/bin/g++'
  .CompilerOptions    = '-o "%2" "%1" -c'
                      + ' -Iinclude -I$CudaIncludePath$'
                      + ' -Icontrib/imgui-1.84.2 -Icontrib/stb -Icontrib/color'
                      + ' -std=c++17'
                      + .'Flags$BuildType$'
  .CompilerInputPath  = 'src/'
  .CompilerOutputPath = '_out/'
  .LibrarianOutput    = '_out/cudaview.lib'
  .LibrarianAdditionalInputs = { 'imgui' }
}

ObjectList('cuda-structured')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17 -g -G'
                        + ' -Isamples/include -Iinclude -Icontrib/stb'
  .CompilerInputPath    = 'samples/structured'
  .CompilerInputPattern = { '*.cu', '*.cpp' }
  .CompilerOutputPath   = '_out/'
}
Executable('run_structured')
{
  .Libraries     = { 'cudaview', 'cuda-structured' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = '_out/run_structured'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('cuda-unstructured')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17'
                        + ' -Isamples/include -Iinclude'
  .CompilerInputPath    = 'samples/unstructured'
  .CompilerInputPattern = { '*.cu', '*.cpp' }
  .CompilerOutputPath   = '_out/'
}
Executable('run_unstructured')
{
  .Libraries     = { 'cudaview', 'cuda-unstructured' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = '_out/run_unstructured'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('cuda-image')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17'
                        + ' -Isamples/include -Iinclude -Icontrib/stb'
  .CompilerInputPath    = 'samples/image'
  .CompilerInputPattern = { '*.cu', '*.cpp' }
  .CompilerOutputPath   = '_out/'
}
Executable('run_image')
{
  .Libraries     = { 'cudaview', 'cuda-image' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = '_out/run_image'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('cuda-sync')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17 -Iinclude'
  .CompilerInputPath    = 'samples/GPU-visual-tool-example'
  .CompilerInputPattern = { 'main.cu' }
  .CompilerOutputPath   = '_out/'
}
Executable('run_sync')
{
  .Libraries     = { 'cudaview', 'cuda-sync' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = '_out/prog'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

ObjectList('cuda-mesh')
{
  .Compiler             = 'CudaCompiler'
  .CompilerOptions      = '-o "%2" "%1" -c'
                        + ' -std=c++17 -Isamples/include -Iinclude'
  .CompilerInputPath    = 'samples/mesh2d'
  .CompilerInputPattern = { '*.cu', '*.cpp' }
  .CompilerOutputPath   = '_out/'
}
Executable('run_mesh')
{
  .Libraries     = { 'cudaview', 'cuda-mesh' }
  .Linker        = .CudaCompilerPath
  .LinkerOutput  = '_out/mesh2d'
  .LinkerOptions = '"%1" -o "%2"'
                 + ' -lglfw -lvulkan -ldl'
}

Alias('samples') { .Targets = { 'run_structured', 'run_unstructured',
  'run_image', 'run_sync', 'run_mesh' } }

Alias('all') { .Targets = { 'cudaview', 'shaders', 'samples' } }
